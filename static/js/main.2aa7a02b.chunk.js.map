{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","React","useState","todos","setTodos","todo","setTodo","todoEditing","setTodoEditing","editingText","setEditingText","useEffect","temp","localStorage","getItem","loadedTodos","JSON","parse","json","stringify","setItem","className","onSubmit","e","preventDefault","newTodo","id","Date","getTime","text","completed","concat","type","onChange","target","value","map","onClick","updatedTodos","filter","deleteTodo","toggleComplete","checked","editTodo","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAoGeA,MAhGf,WACC,MAA0BC,IAAMC,SAAS,IAAzC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAwBH,IAAMC,SAAS,IAAvC,mBAAOG,EAAP,KAAaC,EAAb,KACA,EAAsCL,IAAMC,SAAS,MAArD,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAAsCP,IAAMC,SAAS,IAArD,mBAAOO,EAAP,KAAoBC,EAApB,KA2DC,OAzDDT,IAAMU,WAAU,WACd,IAAMC,EAAOC,aAAaC,QAAQ,SAC5BC,EAAcC,KAAKC,MAAML,GAE5BG,GACDX,EAASW,KAEX,IAEFd,IAAMU,WAAU,WACd,IAAMO,EAAOF,KAAKG,UAAUhB,GAC5BU,aAAaO,QAAQ,QAAQF,KAC5B,CAACf,IA8CD,sBAAKkB,UAAU,MAAf,UACE,uBAAMC,SA7CZ,SAAsBC,GACpBA,EAAEC,iBAEF,IAAMC,EAAU,CACdC,IAAI,IAAIC,MAAOC,UACfC,KAAMxB,EACNyB,WAAW,GAGb1B,EAAS,YAAID,GAAO4B,OAAON,IAC3BnB,EAAQ,KAmCJ,UACE,uBAAO0B,KAAK,OAAOC,SAAU,SAACV,GAAD,OAAOjB,EAAQiB,EAAEW,OAAOC,QAAQA,MAAO9B,IACpE,wBAAQ2B,KAAK,SAAb,yBAED7B,EAAMiC,KAAI,SAAC/B,GAAD,OAAU,gCAElBE,IAAgBF,EAAKqB,GAAM,uBAC5BM,KAAK,OACLC,SAAU,SAACV,GAAD,OAAOb,EAAea,EAAEW,OAAOC,QACzCA,MAAO1B,IAGL,oCAAOJ,EAAKwB,QAGf,wBAAQQ,QAAS,kBA/CxB,SAAoBX,GAClB,IAAMY,EAAe,YAAInC,GAAOoC,QAAO,SAAClC,GAAD,OAAUA,EAAKqB,KAAOA,KAE7DtB,EAASkC,GA4CmBE,CAAWnC,EAAKqB,KAAvC,oBACA,uBACAM,KAAK,WACLC,SAAU,kBA5CjB,SAAwBP,GACtB,IAAMY,EAAe,YAAInC,GAAOiC,KAAI,SAAC/B,GAInC,OAHGA,EAAKqB,KAAQA,IACdrB,EAAKyB,WAAazB,EAAKyB,WAElBzB,KAGTD,EAASkC,GAoCYG,CAAepC,EAAKqB,KACpCgB,QAASrC,EAAKyB,YAEbvB,IAAgBF,EAAKqB,GAAM,wBAAQW,QAAS,kBApCpD,SAAkBX,GAChB,IAAMY,EAAe,YAAInC,GAAOiC,KAAI,SAAC/B,GAInC,OAHGA,EAAKqB,KAAOA,IACbrB,EAAKwB,KAAOpB,GAEPJ,KAETD,EAASkC,GACT9B,EAAe,MACfE,EAAe,IA2ByCiC,CAAStC,EAAKqB,KAArC,yBACF,wBAAQW,QAAS,kBAAM7B,EAAeH,EAAKqB,KAA3C,yBAlBIrB,EAAKqB,WC7D3BkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2aa7a02b.chunk.js","sourcesContent":["import React from 'react';\n//import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n const [todos, setTodos] = React.useState([])\n const [todo, setTodo] = React.useState('')\n const [todoEditing, setTodoEditing] = React.useState(null)\n const [editingText, setEditingText] = React.useState('')\n\n React.useEffect(() => {\n   const temp = localStorage.getItem(\"todos\")\n   const loadedTodos = JSON.parse(temp)\n\n   if(loadedTodos) {\n     setTodos(loadedTodos);\n   }\n },[])\n\n React.useEffect(() => {\n   const json = JSON.stringify(todos);\n   localStorage.setItem(\"todos\",json);\n }, [todos])\n\nfunction handleSubmit(e) {\n  e.preventDefault()\n\n  const newTodo = {\n    id: new Date().getTime(),\n    text: todo,\n    completed: false,\n  }\n\n  setTodos([...todos].concat(newTodo) )\n  setTodo('')\n}\n\nfunction deleteTodo(id){\n  const updatedTodos = [...todos].filter((todo) => todo.id !== id )\n\n  setTodos(updatedTodos)\n}\n\nfunction toggleComplete(id){\n  const updatedTodos = [...todos].map((todo) => {\n    if(todo.id  === id){\n      todo.completed = !todo.completed\n    }\n    return todo\n  })\n\n  setTodos(updatedTodos)\n}\n\nfunction editTodo(id) {\n  const updatedTodos = [...todos].map((todo) => {\n    if(todo.id === id){\n      todo.text = editingText\n    }\n    return todo\n  })\n  setTodos(updatedTodos)\n  setTodoEditing(null)\n  setEditingText('')\n}\n\n\n  return (\n    <div className=\"App\">\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" onChange={(e) => setTodo(e.target.value)} value={todo} /> \n        <button type=\"submit\">ADD TODO</button>\n      </form>\n      {todos.map((todo) => <div key={todo.id}>\n\n        {todoEditing === todo.id ? (<input \n        type=\"text\"\n        onChange={(e) => setEditingText(e.target.value)}\n        value={editingText} \n        />) \n        :\n         (<div> {todo.text}</div>)} \n       \n\n       <button onClick={() => deleteTodo(todo.id)} >Delete</button>\n       <input\n       type=\"checkbox\"\n       onChange={() => toggleComplete(todo.id)}\n       checked={todo.completed} /> \n\n       {todoEditing === todo.id ? (<button onClick={() => editTodo(todo.id)}\n       >Submit edit</button>) : (<button onClick={() => setTodoEditing(todo.id)}\n        >Edit todo</button>) }\n       \n       \n       </div>)}\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}